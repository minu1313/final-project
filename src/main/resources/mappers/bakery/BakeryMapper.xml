<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//ibatis.apache.org//DTD Mapper 3.0//EN" 
						"http://ibatis.apache.org/dtd/ibatis-3-mapper.dtd">
<mapper namespace="kr.kro.bbanggil.user.bakery.mapper.BakeryMapper">

<resultMap id = "BakeryInfoDTO" type = "kr.kro.bbanggil.user.bakery.dto.BakeryInfoDTO">
	<result property="bakeryNo" column="bakery_no"></result>
	<result property="bakeryName" column="bakery_name"></result>
	<result property="bakeryAddress" column="bakery_address"></result>
	<result property="bakeryPhone" column="bakery_phone"></result>
	<result property="bakeryLat" column="latitude"></result>
	<result property="bakeryLog" column="longitude"></result>
	<result property="bakeryRegion" column="region"></result>
	<result property="reviewCount" column="review_count"></result>
	
	<association property="bakeryDetailDTO" javaType="kr.kro.bbanggil.user.bakery.dto.BakeryDetailDTO">
		<result property = "bakeryNo" column="bakery_no"></result>
		<result property="bakeryExp" column="bakery_exp"></result>
		<result property="bakeryAmenity" column="AMENITY"></result>
		<result property = "bakeryInsideInfo" column="inside_info"></result>
		<result property = "bakeryOutSideInfo" column="outside_info"></result>
		<result property = "bakeryCreatedDate" column="created_date"></result>
		<result property = "bakerySubmissionDate" column="submission_date"></result>		
	</association>
	<association property="bakeryReviewDTO" javaType="kr.kro.bbanggil.user.bakery.dto.BakeryReviewDTO">
		<result property="reviewNo" column="review_no"></result>
		<result property="orderNo" column="order_no"></result>
		<result property="userNo" column="user_no"></result>
		<result property="reviewDetail" column="review_detail"></result>
		<result property="reviewRating" column="review_avg"></result>
		<result property="reviewDate" column="review_date"></result>
		<result property="bakeryNo" column="bakery_no"></result>
	</association>
	<association property="bakeryScheduleDTO" javaType="kr.kro.bbanggil.user.bakery.dto.BakeryScheduleDTO">
		<result property="scheduleNo" column="schdule_no"></result>	
		<result property="bakeryNo" column="bakery_no"></result>	
		<result property="bakeryDay" column="day"></result>	
		<result property="bakeryOpenTime" column="open_time"></result>	
		<result property="bakeryCloseTime" column="close_time"></result>	
	</association>
	<association property="bakeryImageDTO" javaType="kr.kro.bbanggil.user.bakery.dto.BakeryImageDTO">
		<result property="bakeryImgNo" column="img_no"></result>	
		<result property="changeName" column="change_name"></result>	
		<result property="originalName" column="original_name"></result>	
		<result property="extension" column="extension"></result>	
		<result property="localPath" column="local_path"></result>	
		<result property="resourcesPath" column="resources_path"></result>	
		<result property="folderNamePath" column="folder_name_path"></result>	
		<result property="position" column="position"></result>	
		<result property="bakeryNo" column="bakery_no"></result>	
	</association>
</resultMap>

	<resultMap id="bakeryInfoResultMap"
		type="kr.kro.bbanggil.user.bakery.dto.response.bakeryUpdateResponseDTO">
		<result property="bakeryNo" column="bakery_no"></result>
		<result property="bakeryName" column="bakery_name"></result>
		<result property="bakeryPhone" column="bakery_phone"></result>
		<result property="bakeryAddress" column="bakery_address"></result>
		<result property="createdDate" column="created_date"></result>
		<result property="insideInfo" column="inside_info"></result>
		<result property="outsideInfo" column="outside_info"></result>
		<result property="parkingInfo" column="amenity"></result>
	</resultMap>

	<resultMap id="bakeryImgResultMap"
		type="kr.kro.bbanggil.user.bakery.dto.request.FileRequestDTO">
		<result property="changeName" column="change_name"></result>
		<result property="folderNamePath" column="folder_name_path"></result>
	</resultMap>

	<resultMap id="bakeryScheduleResultMap"
		type="kr.kro.bbanggil.user.bakery.dto.BakeryTimeSetDTO">
		<result property="day" column="day"></result>
		<result property="start" column="open_time"></result>
		<result property="end" column="close_time"></result>
	</resultMap>
	

<select id="totalCount">
SELECT
	COUNT(*)
FROM
	bakery_info bi
</select>
<!-- 리스트 정보  -->
<select id="bakeryList" resultMap="BakeryInfoDTO">
SELECT
	bi.bakery_no,
		   bi.bakery_name,
		   bi.bakery_address,
		   bi.latitude,
		   bi.longitude,
		   bi.region,
		   bd.amenity,
		   bs."DAY",
		   bs.open_time,
		   bs.close_time,
		   ROUND(AVG(r.review_rating), 1) AS review_avg,
		   COUNT(DISTINCT r.review_no) AS review_count,
		   LISTAGG(DISTINCT mc.category, ', ') WITHIN GROUP (
	ORDER BY mc.category) AS category_list,
		   LISTAGG(DISTINCT m.MENU_NAME, ', ') WITHIN GROUP (
	ORDER BY m.MENU_NAME) AS menu_list
FROM
	bakery_info bi
LEFT JOIN bakery_schedule bs ON
	bs.bakery_no = bi.bakery_no
LEFT JOIN bakery_detail bd ON
	bd.bakery_no = bi.bakery_no
LEFT JOIN review r ON
	r.bakery_no = bi.bakery_no
LEFT JOIN menu m ON
	m.BAKERY_NO = bi.BAKERY_NO
LEFT JOIN MENU_CATEGORY mc ON
	m.CATEGORY_NO = mc.CATEGORY_NO
JOIN bakery_access ba ON
	ba.bakery_no = bi.bakery_no
WHERE
	ba.agree = '승인'
	AND bs."DAY" = #{day}
	AND (
		bi.bakery_name LIKE '%' || #{bakerySearchDTO.searchText} || '%'
		OR bi.bakery_address LIKE '%' || #{bakerySearchDTO.searchText} || '%'
		OR mc.category LIKE '%' || #{bakerySearchDTO.searchText} || '%'
		OR m.menu_name LIKE  #{bakerySearchDTO.searchText} 
		OR (bi.bakery_address LIKE '%' || #{bakerySearchDTO.keyword1} || '%'
			AND m.menu_name LIKE '%' || #{bakerySearchDTO.keyword2} || '%')
		OR (bi.bakery_address LIKE '%' || #{bakerySearchDTO.keyword2} || '%'
			AND m.menu_name LIKE '%' || #{bakerySearchDTO.keyword1} || '%')
	)
GROUP BY
	bi.bakery_no,
		     bi.bakery_name,
		     bi.bakery_address,
		     bi.latitude,
		     bi.longitude,
		     bi.region,
		     bd.amenity,
		     bs."DAY",
		     bs.open_time,
		     bs.close_time

	<choose> 
		<when test="orderType == 'recent'">
			ORDER BY bi.bakery_no DESC
		</when>
		<when test="orderType == 'popular'">
			ORDER BY review_count DESC
		</when>
		<when test="orderType == 'rating'">
			ORDER BY review_avg ASC
		</when>
		<otherwise>
			ORDER BY bi.bakery_no DESC
		</otherwise>
	</choose>
	OFFSET ${pi.offset - 1} ROWS FETCH NEXT ${pi.boardLimit} ROWS ONLY
</select>

<select id = "getLocationAgree" resultType="String">
SELECT
	agree_location
FROM
	agree
WHERE
	user_no = #{userNo}
</select>

<select id="bakeryImage" resultMap="BakeryInfoDTO">
	SELECT 
    * 
	FROM bakery_info bi
	join bakery_image bi2 ON bi2.bakery_no = bi.bakery_no
	WHERE bi.bakery_no = #{bakeryNo} 
</select>

<select id="getBakeryInfo" resultMap="bakeryInfoResultMap">
SELECT
	bi.BAKERY_NO,
			bi.BAKERY_NAME,
			bi.BAKERY_ADDRESS,
			bi.BAKERY_PHONE,
			bd.AMENITY,
			bd.INSIDE_INFO,
			bd.OUTSIDE_INFO,
			bd.CREATED_DATE
FROM
	BAKERY_INFO bi
JOIN BAKERY_DETAIL bd ON
	bi.BAKERY_NO = bd.BAKERY_NO
WHERE
			bi.bakery_no =
			${bakeryNo}
</select>
		
<select id="getBakeryImg" resultMap="bakeryImgResultMap">
SELECT
	CHANGE_NAME,
			FOLDER_NAME_PATH
FROM
	BAKERY_IMAGE bi
WHERE
	bakery_no = ${bakeryNo}
</select>

<select id="getBakerySchedule"
			resultMap="bakeryScheduleResultMap">
SELECT
	DAY,
	open_time,
	close_time
FROM
	BAKERY_SCHEDULE bs
WHERE
	bakery_no = ${bakeryNo}			
</select>

<insert id="bakeryFileUpload">
INSERT
	INTO
	bakery_Image
VALUES(img_seq.nextval,
			#{fileDTO.changeName},
			#{fileDTO.originalName},
			#{fileDTO.extension},
			#{fileDTO.size},
			#{fileDTO.localPath},
			#{fileDTO.localResourcePath},
			#{fileDTO.folderNamePath},
			#{imgLocation},
			#{bakeryNo},
			'')
</insert>
<insert id="bakeryInsert">
<selectKey resultType="int" keyProperty="bakeryNo"
				order="BEFORE">
SELECT bakery_seq.nextval from dual
</selectKey>
INSERT
	INTO
	bakery_info
VALUES(#{bakeryNo},
			#{bakeryName},
			#{bakeryAddress},
			#{bakeryPhone},
			#{latitude},
			#{longitude},
			#{region})
</insert>
<insert id="bakeryDetailInsert">
INSERT
	INTO
	bakery_detail
VALUES(#{bakeryNo},
			#{amenity},
			#{insideInfo},
			#{outsideInfo},
			#{createdDate},
			sysdate)
</insert>

<insert id="bakeryScheduleInsert">
INSERT
	INTO
	bakery_schedule
VALUES(schedule_seq.nextval,
			#{bakeryNo},
			#{timeDTO.day},
			#{timeDTO.start},
			#{timeDTO.end})
</insert>

<insert id="setBakery">
INSERT
	INTO
	bakery_access
VALUES(#{bakeryNo},
			'대기',
			#{userNo},
			'',
			'')
</insert>
		
<insert id="UserCountInsert">
INSERT
	INTO
	user_count
VALUES(#{bakeryNo},
0,
0)
</insert>

<update id="resetDailyVisitCount">
UPDATE
	user_count
SET
	total_visit = total_visit + user_count,
	user_count = 0
</update>

<select id="requestUserNo">
SELECT
	user_no
FROM
	BAKERY_INFO bi
JOIN BAKERY_ACCESS
			ba ON
	bi.BAKERY_NO = ba.BAKERY_NO
WHERE
	ba.BAKERY_NO = ${bakeryNo}
</select>

<select id="getFileInfo">
SELECT
	change_name AS changeName,
			local_path AS
			localPath
FROM
	bakery_image
WHERE
	'position' = '${imgLocation}'
</select>

<delete id="deleteFile">
DELETE
FROM
	bakery_image
WHERE
	change_name =
			${fileName}
</delete>

<update id="bakeryUpdate">
UPDATE
	bakery_info
SET
	bakery_name = #{bakeryName},
			bakery_address = #{bakeryAddress},
			bakery_phone = #{bakeryPhone}
WHERE
			bakery_no = #{bakeryNo}
</update>

<update id="bakeryDetailUpdate">
UPDATE
	bakery_detail
SET
	amenity = #{parkingInfo},
			inside_info = #{insideInfo},
			outside_info = #{outsideInfo}
WHERE
			bakery_no = #{bakeryNo}
</update>

<update id="bakeryScheduleUpdate">
UPDATE
	bakery_Schedule
SET
	open_time =
			#{timeDTO.start},
			close_time = #{timeDTO.end}
WHERE
	bakery_no =
			#{bakeryNo}
	AND DAY = #{timeDTO.day}
</update>

<update id="bakeryAccessUpdate">
UPDATE
	bakery_Access
SET
	agree = '대기',
				reject = NULL,
				Accept_date = NULL
WHERE
	bakery_no = #{bakeryNo}
</update>

<select id="bakeryInfo" >
SELECT
	bi.BAKERY_NAME AS bakeryName,
				   bi.BAKERY_ADDRESS AS bakeryAddress,
				   bi.BAKERY_PHONE AS bakeryPhone,
				   bd.INSIDE_INFO AS insideInfo,
				   bd.OUTSIDE_INFO AS outsideInfo,
				   bd.AMENITY AS parkingInfo,
				   ba.AGREE,
				   ba.reject
FROM
	BAKERY_INFO bi
JOIN BAKERY_DETAIL bd ON
	bi.BAKERY_NO = bd.BAKERY_NO
JOIN BAKERY_ACCESS ba ON
	bi.BAKERY_NO = ba.BAKERY_NO
WHERE
	bi.BAKERY_NO = ${bakeryNo}
</select>

<select id="getBakeriesByRegion" resultMap="BakeryInfoDTO">

SELECT
			*
FROM
			BAKERY_INFO bi
WHERE
			region LIKE '%' ||
			#{region} || '%'

</select>
		
<select id="getUserCountBybakeryNo" resultType="int">
SELECT
	user_count
FROM
	user_count
WHERE
	bakery_no = ${bakeryNo}
</select>
		
		
<update id="updateUserCount">
UPDATE
	user_count
SET
	user_count = ${count}
WHERE
	bakery_no = ${bakeryNo}
</update>
</mapper>