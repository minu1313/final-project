<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//ibatis.apache.org//DTD Mapper 3.0//EN"
						 "http://ibatis.apache.org/dtd/ibatis-3-mapper.dtd">
<mapper namespace="kr.kro.bbanggil.user.bakery.mapper.BakeryMapper">

	<resultMap id="BakeryResultMap"
		type="kr.kro.bbanggil.user.bakery.dto.BakeryDto">

		<!-- 기본 Bakery 정보 -->
		<result property="no" column="bakery_no" />
		<result property="name" column="bakery_name" />
		<result property="latitude" column="latitude" />
		<result property="longitude" column="longitude" />
		<result property="region" column="region" />
		<result property="address" column="bakery_address" />
		<result property="phone" column="bakery_phone" />

		<!-- BakeryResponseDto와 연관된 정보 (리뷰, 이미지, 메뉴 등) -->
		<association property="response"
			javaType="kr.kro.bbanggil.user.bakery.dto.response.BakeryDetailResponseDto">
			<result property="reviewRating" column="review_rating" />
			<result property="createDate" column="created_date" />
			<result property="totalCount" column="bakery_count" />
			<result property="menuNo" column="menu_no" />
			<result property="menuName" column="menu_name" />
			<result property="menuPrice" column="menu_price" />
			<result property="menuInfo" column="menu_info" />
			<result property="categoryName" column="category_no" />
			<result property="category" column="category" />
			<result property="imgNo" column="img_no" />
			<result property="changeName" column="change_name" />
			<result property="amenity" column="amenity" />
			<result property="insideInfo" column="inside_info" />
			<result property="outsideInfo" column="outside_info" />
			<result property="submissionDate" column="submission_date" />
			<result property="resourcesPath" column="resources_path" />
		</association>
		
		<!-- BakeryScheduleDto와 연관된 정보 (요일별 운영시간) -->
		<collection property="schedule" javaType="java.util.List"
			ofType="kr.kro.bbanggil.user.bakery.dto.response.BakeryResponseScheduleDto">
			<result property="day" column="day" />
			<result property="openTime" column="open_time" />
			<result property="closeTime" column="close_time" />
		</collection>
	</resultMap>


<insert id="insertBakery"
		parameterType="kr.kro.bbanggil.user.bakery.dto.BakeryDto">
INSERT
	INTO
		bakery_info(bakery_no,
	bakery_name,
	bakery_address,
	bakery_phone,
	latitude,
	longitude,
	region)
VALUES(bakery_seq.nextval,
#{name},
#{address},
#{phone},
#{latitude},
#{longitude},
#{region})

</insert>


<select id="getPopularBakeries" resultMap="BakeryResultMap">

	SELECT
	bi.bakery_no,
	bi.bakery_name,
	bi.bakery_address,
	MIN(m.menu_name) AS menu_name,
	MIN(TO_CHAR(m.menu_info)) AS menu_info,
	MIN(bi2.img_no) AS img_no,
	MIN(bi2.resources_path) AS resources_path,
	MIN(bi2.change_name) AS change_name,
	AVG(r.review_rating) AS review_rating
FROM
	bakery_info bi
JOIN menu m ON
	m.bakery_no = bi.bakery_no
JOIN review r ON
	r.bakery_no = bi.bakery_no
JOIN bakery_image bi2 ON
	bi2.bakery_no = bi.bakery_no
JOIN BAKERY_ACCESS ba ON
	ba.BAKERY_NO = bi.BAKERY_NO
WHERE
	ba.AGREE = '승인'
GROUP BY
	bi.bakery_no,
	bi.bakery_name,
	bi.bakery_address
ORDER BY
	review_rating DESC
FETCH FIRST 10 ROWS ONLY	

</select>

<select id="getRecentBakeries" resultMap="BakeryResultMap">

	SELECT
	bi.BAKERY_NO ,
	bi.BAKERY_NAME ,
	bi.BAKERY_ADDRESS ,
	bd.CREATED_DATE ,
	BI2.IMG_NO ,
	BI2.CHANGE_NAME ,
	BI2.RESOURCES_PATH
FROM
	BAKERY_INFO bi
JOIN BAKERY_ACCESS ba ON
	bi.BAKERY_NO = ba.BAKERY_NO
JOIN USER_INFO ui 
ON
	ba.USER_NO = ui.USER_NO
JOIN BAKERY_IMAGE bi2 
ON
	BI2.BAKERY_NO = bi.BAKERY_NO
JOIN BAKERY_DETAIL bd 
ON
	bd.BAKERY_NO = bi.BAKERY_NO
WHERE
	ba.AGREE = '승인'
ORDER BY
	bd.CREATED_DATE 
	



</select>

<select id="getTopFiveOrders" resultMap="BakeryResultMap">

SELECT
		mc.CATEGORY_NO ,
		SUM(ci.MENU_COUNT) AS totalOrders
FROM
		BAKERY_INFO bi
JOIN MENU m
		ON
		m.BAKERY_NO = BI.BAKERY_NO
JOIN CART_INFO ci
		ON
		m.MENU_NO = ci.MENU_NO
JOIN MENU_CATEGORY mc
		ON
		mc.CATEGORY_NO = m.CATEGORY_NO
GROUP BY
		mc.CATEGORY_NO
ORDER BY
		totalOrders DESC
		FETCH FIRST 5 ROWS ONLY

</select>


<select id="getCategoryBakeries" resultMap="BakeryResultMap">
SELECT
	mc.CATEGORY,
	COUNT(DISTINCT bi.BAKERY_NO) AS bakery_count
FROM
	MENU_CATEGORY mc
JOIN MENU m ON
	mc.CATEGORY_NO = m.CATEGORY_NO
JOIN CART_INFO ci ON
	m.MENU_NO = ci.MENU_NO
JOIN BAKERY_INFO bi ON
	bi.BAKERY_NO = m.BAKERY_NO
GROUP BY
	mc.CATEGORY
ORDER BY
	bakery_count DESC
FETCH FIRST 5 ROWS ONLY

</select>
</mapper>
